package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"FlightBookingAPI/clients/graphql/generated"
	"FlightBookingAPI/clients/graphql/models"
	dto "FlightBookingAPI/clients/services/models"
	"context"
)

// CreatePlane is the resolver for the createPlane field.
func (r *mutationResolver) CreatePlane(ctx context.Context, input models.NewPlane) (*models.Plane, error) {
	// panic(fmt.Errorf("not implemented: CreatePlane - createPlane"))
	plane := &dto.Plane{
		Id:        input.ID,
		Type:      input.Type,
		TotalSeat: int32(input.TotalSeat),
		// Status:    dto.PlaneStatus(dto.STS_READY),
		Status: dto.FromGraphQLEnum(&input.Status),
	}
	newPlane, err := r.planeService.CreatePlane(plane)
	if err != nil {
		return nil, err
	}

	pRes := newPlane.ToGraphQLModel()
	return pRes, nil
}

// UpdatePlane is the resolver for the updatePlane field.
func (r *mutationResolver) UpdatePlane(ctx context.Context, input models.UpdatePlane) (*models.Plane, error) {
	// panic(fmt.Errorf("not implemented: UpdatePlane - updatePlane"))
	plane := &dto.Plane{
		Id: input.ID,
	}

	if input.Status != nil {
		plane.Status = dto.FromGraphQLEnum(input.Status)
	}

	if input.TotalSeat != nil {
		plane.TotalSeat = int32(*input.TotalSeat)
	}

	if input.Type != nil {
		plane.Type = *input.Type
	}
	updatedPlane, err := r.planeService.UpdatePlane(plane)
	if err != nil {
		return nil, err
	}

	pRes := updatedPlane.ToGraphQLModel()
	return pRes, nil
}

// DeletePlane is the resolver for the deletePlane field.
func (r *mutationResolver) DeletePlane(ctx context.Context, input models.DeletePlane) (*models.DeletedPlane, error) {
	// panic(fmt.Errorf("not implemented: DeletePlane - deletePlane"))
	err := r.planeService.DeletePlane(input.ID)
	if err != nil {
		return nil, err
	}
	return &models.DeletedPlane{ID: input.ID}, nil
}

// Planes is the resolver for the planes field.
func (r *queryResolver) Planes(ctx context.Context) ([]*models.Plane, error) {
	// panic(fmt.Errorf("not implemented: Planes - planes"))
	planes, err := r.planeService.ListPlanes()
	if err != nil {
		return nil, err
	}

	listRes := make([]*models.Plane, 0)
	for _, plane := range planes {
		listRes = append(listRes, plane.ToGraphQLModel())
	}
	return listRes, err
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
