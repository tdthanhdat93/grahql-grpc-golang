// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Booking struct {
	FlightID string `json:"flightId"`
}

type DateTime struct {
	Year    int `json:"year"`
	Month   int `json:"month"`
	Day     int `json:"day"`
	Hours   int `json:"hours"`
	Minutes int `json:"minutes"`
}

type DeleteFlight struct {
	ID string `json:"id"`
}

type DeletePlane struct {
	ID string `json:"id"`
}

type DeletedFlight struct {
	ID string `json:"id"`
}

type DeletedPlane struct {
	ID string `json:"id"`
}

type FindFlightParams struct {
	Departure      *string        `json:"departure,omitempty"`
	Arrival        *string        `json:"arrival,omitempty"`
	StartTimeRange *InputDateTime `json:"startTimeRange,omitempty"`
	EndTimeRange   *InputDateTime `json:"endTimeRange,omitempty"`
}

type Flight struct {
	ID            string    `json:"id"`
	PlaneID       string    `json:"planeId"`
	Departure     string    `json:"departure"`
	Arrival       string    `json:"arrival"`
	TimeDepart    *DateTime `json:"timeDepart"`
	TimeArrive    *DateTime `json:"timeArrive"`
	AvailableSeat int       `json:"availableSeat"`
}

type InputDateTime struct {
	Year    int `json:"year"`
	Month   int `json:"month"`
	Day     int `json:"day"`
	Hours   int `json:"hours"`
	Minutes int `json:"minutes"`
}

type NewFlight struct {
	ID            string         `json:"id"`
	PlaneID       string         `json:"planeId"`
	Departure     string         `json:"departure"`
	Arrival       string         `json:"arrival"`
	TimeDepart    *InputDateTime `json:"timeDepart"`
	TimeArrive    *InputDateTime `json:"timeArrive"`
	AvailableSeat int            `json:"availableSeat"`
}

type NewPlane struct {
	ID        string      `json:"id"`
	Type      string      `json:"type"`
	TotalSeat int         `json:"totalSeat"`
	Status    PlaneStatus `json:"status"`
}

type Plane struct {
	ID        string      `json:"id"`
	Type      string      `json:"type"`
	TotalSeat int         `json:"totalSeat"`
	Status    PlaneStatus `json:"status"`
}

type UpdateFlight struct {
	ID            string         `json:"id"`
	PlaneID       *string        `json:"planeId,omitempty"`
	Departure     *string        `json:"departure,omitempty"`
	Arrival       *string        `json:"arrival,omitempty"`
	TimeDepart    *InputDateTime `json:"timeDepart,omitempty"`
	TimeArrive    *InputDateTime `json:"timeArrive,omitempty"`
	AvailableSeat *int           `json:"availableSeat,omitempty"`
}

type UpdatePlane struct {
	ID        string       `json:"id"`
	Type      *string      `json:"type,omitempty"`
	TotalSeat *int         `json:"totalSeat,omitempty"`
	Status    *PlaneStatus `json:"status,omitempty"`
}

type PlaneStatus string

const (
	PlaneStatusStsUnspecified PlaneStatus = "STS_UNSPECIFIED"
	PlaneStatusStsCleaning    PlaneStatus = "STS_CLEANING"
	PlaneStatusStsMaintain    PlaneStatus = "STS_MAINTAIN"
	PlaneStatusStsReady       PlaneStatus = "STS_READY"
)

var AllPlaneStatus = []PlaneStatus{
	PlaneStatusStsUnspecified,
	PlaneStatusStsCleaning,
	PlaneStatusStsMaintain,
	PlaneStatusStsReady,
}

func (e PlaneStatus) IsValid() bool {
	switch e {
	case PlaneStatusStsUnspecified, PlaneStatusStsCleaning, PlaneStatusStsMaintain, PlaneStatusStsReady:
		return true
	}
	return false
}

func (e PlaneStatus) String() string {
	return string(e)
}

func (e *PlaneStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlaneStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlaneStatus", str)
	}
	return nil
}

func (e PlaneStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
